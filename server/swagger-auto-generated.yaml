openapi: 3.0.2
info:
  title: Campus Events and Entertainment Center API
  version: 1.0.0
  description: API for managing campus events and entertainment
servers:
  - url: http://localhost:5000/api
security:
  - bearerAuth: []
paths:
  /events:
    post:
      tags:
        - Events
      summary: Create an event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - title
                - description
                - poster
                - organizer
                - participants
                - start_time
                - end_time
                - location
                - tags
                - status
                - comments
                - ratings
              properties:
                title:
                  type: string
                description:
                  type: string
                poster:
                  type: string
                  description: The URL of the event's poster
                organizer:
                  $ref: '#/components/schemas/User'
                participants:
                  type: array
                  items:
                    $ref: '#/components/schemas/EventParticipant'
                start_time:
                  type: string
                  format: date-time
                end_time:
                  type: string
                  format: date-time
                location:
                  $ref: '#/components/schemas/Location'
                tags:
                  type: array
                  items:
                    $ref: '#/components/schemas/EventTag'
                status:
                  $ref: '#/components/schemas/EventStatus'
                comments:
                  type: array
                  items:
                    $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Event created successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      security: []
  /events/{event_id}:
    get:
      tags:
        - Events
      summary: Get an event by id
      parameters:
        - $ref: '#/components/parameters/path_event_id'
      responses:
        '200':
          description: Event found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          $ref: '#/components/responses/404'
  /locations:
    get:
      tags:
        - Locations
      summary: Get a list of locations
      description: Only available locations are returned
      parameters:
        - $ref: '#/components/parameters/query_limit'
        - $ref: '#/components/parameters/query_offset'
      responses:
        '200':
          description: Locations found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - Locations
      summary: Create a location
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        '200':
          description: Location created successfully
        '401':
          $ref: '#/components/responses/401'
  /users:
    post:
      tags:
        - Users
      summary: Register a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  pattern: ^[a-zA-Z0-9]+$
                  maxLength: 15
                password:
                  type: string
                  pattern: ^[a-zA-Z0-9]+$
                  maxLength: 32
      responses:
        '200':
          description: User created successfully
        '429':
          $ref: '#/components/responses/429'
      security: []
  /sessions:
    post:
      tags:
        - Users
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  pattern: ^[a-zA-Z0-9]+$
                  maxLength: 15
                password:
                  type: string
                  pattern: ^[a-zA-Z0-9]+$
                  maxLength: 32
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  token:
                    type: string
                  expires:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/401'
      security: []
    delete:
      tags:
        - Users
      summary: Logout a user
      responses:
        '200':
          description: User logged out successfully
        '401':
          $ref: '#/components/responses/401'
  /users/{username}:
    get:
      tags:
        - Users
      summary: Get a user by username
      parameters:
        - $ref: '#/components/parameters/path_username'
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/404'
  /me:
    get:
      tags:
        - Users
      summary: Get the current user by token
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401'
    put:
      tags:
        - Users
      summary: Edit the current user's info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User info updated successfully
        '401':
          $ref: '#/components/responses/401'
    delete:
      tags:
        - Users
      summary: Delete the current user
      responses:
        '200':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/401'
components:
  parameters:
    path_username:
      name: username
      in: path
      required: true
      schema:
        type: string
        pattern: ^[a-zA-Z0-9]+$
        maxLength: 15
    path_event_id:
      name: event_id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
    path_location_id:
      name: location_id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
    path_tag_id:
      name: tag_id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
    path_comment_id:
      name: comment_id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
    query_limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
    query_offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
    query_desc:
      name: desc
      in: query
      required: false
      schema:
        type: boolean
        default: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Event:
      type: object
      additionalProperties: false
      required:
        - id
        - title
        - description
        - poster
        - organizer
        - participants
        - time
        - location
        - tags
        - status
        - comments
        - ratings
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
        description:
          type: string
        poster:
          type: string
          description: The URL of the event's poster
        organizer:
          $ref: '#/components/schemas/User'
        participants:
          type: array
          items:
            $ref: '#/components/schemas/EventParticipant'
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        location:
          $ref: '#/components/schemas/Location'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EventTag'
        status:
          $ref: '#/components/schemas/EventStatus'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    Gender:
      enum:
        - 1
        - 2
        - 3
      type: integer
      description: 1 = male, 2 = female, 3 = other
    Location:
      type: object
      additionalProperties: false
      required:
        - id
        - name
        - address
        - status
        - seat arrangement
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        address:
          type: string
        status:
          $ref: '#/components/schemas/LocationStatus'
        seat arrangement:
          type: integer
          description: The number of seats in the location
    LocationStatus:
      enum:
        - 1
        - 2
        - 3
      type: integer
      description: 1 = Available, 2 = Unavailable, 3 = Closed
    ErrorDetail:
      title: ErrorDetail
      additionalProperties: false
      required:
        - title
        - description
      type: object
      properties:
        title:
          title: Title
          type: string
        description:
          title: Description
          type: string
    User:
      type: object
      additionalProperties: false
      required:
        - username
        - nickname
        - user_group
        - avatar
        - user_intro
        - user_email
      properties:
        id:
          type: integer
          description: The auto-generated id of the user
          readOnly: true
        username:
          type: string
          description: The username of the user
        nickname:
          type: string
        user_group:
          $ref: '#/components/schemas/UserGroup'
        avatar:
          type: string
          description: The URL of the user's avatar
        user_intro:
          type: string
        user_email:
          type: string
          format: email
    UserGroup:
      enum:
        - 1
        - 2
        - 3
      type: integer
      description: 1 = Audience, 2 = Organizer, 3 = Admin
    UserPrivacy:
      type: object
      additionalProperties: false
      required:
        - gender
        - birthday
        - event_history
        - following
        - followers
        - published_events
      properties:
        password:
          type: string
          description: The password after sha256 encryption with salt
        gender:
          $ref: '#/components/schemas/Gender'
        birthday:
          type: string
          format: date
        event_history:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        following:
          type: array
          items:
            $ref: '#/components/schemas/User'
        followers:
          type: array
          items:
            $ref: '#/components/schemas/User'
        published_events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
  responses:
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetail'
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetail'
    '403':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetail'
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetail'
    '429':
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetail'
    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetail'
tags:
  - name: Users
    description: Operations about users
  - name: Events
    description: Operations about events
  - name: Comments
    description: Operations about comments
  - name: Locations
    description: Operations about locations
